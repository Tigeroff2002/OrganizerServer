DROP DATABASE IF EXISTS CalendarDatabase;

CREATE DATABASE CalendarDatabase;

CREATE TYPE decision_type AS ENUM ('none', 'default', 'apply', 'deny');
CREATE TYPE event_status AS ENUM ('none', 'not_started', 'within_reminder_offset', 'live', 'finished', 'cancelled');
CREATE TYPE event_type AS ENUM ('none', 'personal', 'one_to_one', 'stand_up', 'meeting');
CREATE TYPE group_type AS ENUM ('none', 'educational', 'job');
CREATE TYPE report_type AS ENUM ('none', 'events_report', 'tasks_report');
CREATE TYPE task_current_status AS ENUM ('none', 'to_do', 'in_progress', 'review', 'done');
CREATE TYPE task_type AS ENUM ('none', 'abstract_goal', 'meeting_presense', 'job_complete');

      CREATE TABLE groups (
          id integer GENERATED BY DEFAULT AS IDENTITY,
          group_name text NOT NULL,
          type group_type NOT NULL,
          CONSTRAINT pk_groups PRIMARY KEY (id)
      );

      CREATE TABLE users (
          id integer GENERATED BY DEFAULT AS IDENTITY,
          user_name text NOT NULL,
          email text NOT NULL,
          password text NOT NULL,
          phone_number text NOT NULL,
          auth_token text NOT NULL,
          CONSTRAINT pk_users PRIMARY KEY (id)
      );

     CREATE TABLE events (
          id integer GENERATED BY DEFAULT AS IDENTITY,
          caption text NOT NULL,
          description text NOT NULL,
          scheduled_start timestamp with time zone NOT NULL,
          duration interval NOT NULL,
          event_type event_type NOT NULL,
          status event_status NOT NULL,
          related_group_id integer NOT NULL,
          manager_id integer NOT NULL,
          CONSTRAINT pk_events PRIMARY KEY (id),
          CONSTRAINT fk_events_groups_related_group_id FOREIGN KEY (related_group_id) REFERENCES groups (id) ON DELETE CASCADE,
          CONSTRAINT fk_events_users_manager_id FOREIGN KEY (manager_id) REFERENCES users (id) ON DELETE CASCADE
      );

      CREATE TABLE groups_users_map (
          user_id integer NOT NULL,
          group_id integer NOT NULL,
          CONSTRAINT pk_groups_users_map PRIMARY KEY (user_id, group_id),
          CONSTRAINT fk_groups_users_map_groups_group_id FOREIGN KEY (group_id) REFERENCES groups (id) ON DELETE CASCADE,
          CONSTRAINT fk_groups_users_map_users_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
      );

     CREATE TABLE reports (
          id integer GENERATED BY DEFAULT AS IDENTITY,
          description text NOT NULL,
          report_type report_type NOT NULL,
          begin_moment timestamp with time zone NOT NULL,
          end_moment timestamp with time zone NOT NULL,
          user_id integer NOT NULL,
          CONSTRAINT pk_reports PRIMARY KEY (id),
          CONSTRAINT fk_reports_users_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
      );

     CREATE TABLE tasks (
          id integer GENERATED BY DEFAULT AS IDENTITY,
          caption text NOT NULL,
          description text NOT NULL,
          task_type task_type NOT NULL,
          task_status task_current_status NOT NULL,
          reporter_id integer NOT NULL,
          implementer_id integer NOT NULL,
          CONSTRAINT pk_tasks PRIMARY KEY (id),
          CONSTRAINT fk_tasks_users_implementer_id FOREIGN KEY (implementer_id) REFERENCES users (id) ON DELETE CASCADE,
          CONSTRAINT fk_tasks_users_user_id FOREIGN KEY (reporter_id) REFERENCES users (id) ON DELETE CASCADE
      );

      CREATE TABLE events_users_map (
          user_id integer NOT NULL,
          event_id integer NOT NULL,
          decision_type decision_type NOT NULL,
          CONSTRAINT pk_events_users_map PRIMARY KEY (user_id, event_id),
          CONSTRAINT fk_events_users_map_events_event_id FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE,
          CONSTRAINT fk_events_users_map_users_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
      );

      CREATE INDEX ix_events_manager_id ON events (manager_id);
      CREATE INDEX ix_events_related_group_id ON events (related_group_id);
      CREATE INDEX ix_events_users_map_event_id ON events_users_map (event_id);
      CREATE INDEX ix_groups_users_map_group_id ON groups_users_map (group_id);
      CREATE INDEX ix_reports_user_id ON reports (user_id);
      CREATE INDEX ix_tasks_implementer_id ON tasks (implementer_id);
      CREATE INDEX ix_tasks_reporter_id ON tasks (reporter_id);

INSERT INTO groups (group_name, type) VALUES ('Add dot net pls', 'educational');
INSERT INTO groups(group_name, type) VALUES ('ADF', 'job');
INSERT INTO groups(group_name, type) VALUES ('pri120', 'educational');

INSERT INTO users (user_name, email, password, phone_number, auth_token) 
VALUES ('Kirill', 'kirill.parakhin@altenar.com', 'kirill2002', '+79042555027', '0347837483');
INSERT INTO users (user_name, email, password, phone_number, auth_token) 
VALUES ('Tigeroff', 'parahinkirill2002@yandex.ru', 'tigeroff2002', '+79032565027', '0745637489');
INSERT INTO users (user_name, email, password, phone_number, auth_token) 
VALUES ('Nikita', 'portnovnikitos2002@yandex.ru', 'nikita2002', '+79302555027', '0890837483');

INSERT INTO events 
(caption, description, scheduled_start, duration, event_type, status, related_group_id, manager_id)
VALUES ('StandUp', 'Every day morning standup meeting', '2023-12-20 12:00:00.000 +0300',
        '00:15:00', 'stand_up', 'not_started', 2, 1);
INSERT INTO events 
(caption, description, scheduled_start, duration, event_type, status, related_group_id, manager_id)
VALUES ('Lection trmp', 'Every week trmp lection', '2023-12-15 10:20:00.000 +0300',
        '01:30:00', 'meeting', 'not_started', 3, 2);
INSERT INTO events 
(caption, description, scheduled_start, duration, event_type, status, related_group_id, manager_id)
VALUES ('Olimpiad discussion', 'Discussion about december tour of ICPC olimpiad', '2023-12-07 14:00:00.000 +0300',
        '03:00:00', 'meeting', 'not_started', 1, 1);
INSERT INTO events 
(caption, description, scheduled_start, duration, event_type, status, related_group_id, manager_id)
VALUES ('Retro', 'Project retro discussion', '2023-12-22 14:30:00.000 +0300',
        '00:30:00', 'stand_up', 'not_started', 2, 1);

INSERT INTO groups_users_map (user_id, group_id)
VALUES (1, 1);
INSERT INTO groups_users_map (user_id, group_id)
VALUES (1, 2);
INSERT INTO groups_users_map (user_id, group_id)
VALUES (1, 3);
INSERT INTO groups_users_map (user_id, group_id)
VALUES (2, 1);
INSERT INTO groups_users_map (user_id, group_id)
VALUES (2, 3);
INSERT INTO groups_users_map (user_id, group_id)
VALUES (3, 2);
INSERT INTO groups_users_map (user_id, group_id)
VALUES (3, 3);

INSERT INTO events_users_map (user_id, event_id, decision_type)
VALUES (1, 1, 'apply');
INSERT INTO events_users_map (user_id, event_id, decision_type)
VALUES (3, 1, 'default');
INSERT INTO events_users_map (user_id, event_id, decision_type)
VALUES (1, 2, 'apply');
INSERT INTO events_users_map (user_id, event_id, decision_type)
VALUES (2, 2, 'apply');
INSERT INTO events_users_map (user_id, event_id, decision_type)
VALUES (3, 2, 'apply');
INSERT INTO events_users_map (user_id, event_id, decision_type)
VALUES (1, 3, 'apply');
INSERT INTO events_users_map (user_id, event_id, decision_type)
VALUES (2, 3, 'apply');
INSERT INTO events_users_map (user_id, event_id, decision_type)
VALUES (1, 4, 'apply');
INSERT INTO events_users_map (user_id, event_id, decision_type)
VALUES (3, 4, 'deny');

INSERT INTO tasks (caption, description, task_type, task_status, reporter_id, implementer_id)
VALUES ('Create new backend .net server', 'Create asp.net server for trmp course work', 
       'job_complete', 'in_progress', 1, 3);
INSERT INTO tasks (caption, description, task_type, task_status, reporter_id, implementer_id)
VALUES ('Create new olimpiad plan', 'Create plan for preparation to ICPC olimpiad', 
       'abstract_goal', 'to_do', 1, 2);
INSERT INTO tasks (caption, description, task_type, task_status, reporter_id, implementer_id)
VALUES ('December meeting presense', 'Be presense on december ADF common meetings', 
       'meeting_presense', 'in_progress', 1, 1);

INSERT INTO reports (description, report_type, begin_moment, end_moment, user_id)
VALUES ('Empty report about Kirill`s events in december', 'events_report',
        '2023-12-01 12:00:00.000 +0300', '2023-12-30 00:00:00.000 +0300', 1);
INSERT INTO reports (description, report_type, begin_moment, end_moment, user_id)
VALUES ('Empty report about Nikits`s tasks in december beginning', 'tasks_report',
        '2023-12-01 14:00:00.000 +0300', '2023-12-10 10:00:00.000 +0300', 3);

COPY inflation_data
FROM '/docker-entrypoint-initdb.d/inflation.csv'
DELIMITER ','
CSV HEADER;