CREATE TYPE decision_type AS ENUM ('none', 'default', 'apply', 'deny'); 
CREATE TYPE event_status AS ENUM ('none', 'not_started', 'within_reminder_offset', 'live', 'finished', 'cancelled');
CREATE TYPE event_type AS ENUM ('none', 'personal', 'one_to_one', 'stand_up', 'meeting');
CREATE TYPE group_type AS ENUM ('none', 'educational', 'job');
CREATE TYPE report_type AS ENUM ('none', 'events_report', 'tasks_report');
CREATE TYPE task_current_status AS ENUM ('none', 'to_do', 'in_progress', 'review', 'done');
CREATE TYPE task_type AS ENUM ('none', 'abstract_goal', 'meeting_presense', 'job_complete');

CREATE TABLE users (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    user_name text NOT NULL,
    email text NOT NULL,
    password text NOT NULL,
    phone_number text NOT NULL,
    auth_token text NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (id));

CREATE TABLE groups (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    group_name text NOT NULL,
    type group_type NOT NULL,
    CONSTRAINT pk_groups PRIMARY KEY (id));

CREATE TABLE groups_users_map (
    user_id integer NOT NULL,
    group_id integer NOT NULL,
    CONSTRAINT pk_groups_users_map PRIMARY KEY (user_id, group_id),
    CONSTRAINT fk_groups_users_map_groups_group_id FOREIGN KEY (group_id) REFERENCES groups (id) ON DELETE CASCADE,
    CONSTRAINT fk_groups_users_map_users_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE);

CREATE TABLE events (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    caption text NOT NULL,
    description text NOT NULL,
    scheduled_start timestamp with time zone NOT NULL,
    duration interval NOT NULL,
    event_type event_type NOT NULL,
    status event_status NOT NULL,
    related_group_id integer NOT NULL,
    manager_id integer NOT NULL,
    CONSTRAINT pk_events PRIMARY KEY (id),
    CONSTRAINT fk_events_groups_related_group_id FOREIGN KEY (related_group_id) REFERENCES groups (id) ON DELETE CASCADE,
    CONSTRAINT fk_events_users_manager_id FOREIGN KEY (manager_id) REFERENCES users (id) ON DELETE CASCADE);

CREATE TABLE events_users_map (
    user_id integer NOT NULL,
    event_id integer NOT NULL,
    decision_type decision_type NOT NULL,
    CONSTRAINT pk_events_users_map PRIMARY KEY (user_id, event_id),
    CONSTRAINT fk_events_users_map_events_event_id FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE,
    CONSTRAINT fk_events_users_map_users_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE);

CREATE TABLE tasks (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    caption text NOT NULL,
    description text NOT NULL,
    task_type task_type NOT NULL,
    task_status task_current_status NOT NULL,
    reporter_id integer NOT NULL,
    implementer_id integer NOT NULL,
    CONSTRAINT pk_tasks PRIMARY KEY (id),
    CONSTRAINT fk_tasks_users_implementer_id FOREIGN KEY (implementer_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_tasks_users_user_id FOREIGN KEY (reporter_id) REFERENCES users (id) ON DELETE CASCADE);

CREATE TABLE reports (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    description text NOT NULL,
    report_type report_type NOT NULL,
    begin_moment timestamp with time zone NOT NULL,
    end_moment timestamp with time zone NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT pk_reports PRIMARY KEY (id),
    CONSTRAINT fk_reports_users_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE);

CREATE INDEX ix_events_manager_id ON events (manager_id);
CREATE INDEX ix_events_related_group_id ON events (related_group_id);
CREATE INDEX ix_events_users_map_event_id ON events_users_map (event_id);
CREATE INDEX ix_groups_users_map_group_id ON groups_users_map (group_id);
CREATE INDEX ix_reports_user_id ON reports (user_id);
CREATE INDEX ix_tasks_implementer_id ON tasks (implementer_id);
CREATE INDEX ix_tasks_reporter_id ON tasks (reporter_id);

DROP TABLE reports;

CREATE TYPE snapshot_type AS ENUM ('none', 'events_snapshot', 'tasks_snapshot', 'issues_snapshot', 'reports_snapshot');
DROP TYPE report_type;

CREATE TABLE snapshots (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    description text NOT NULL,
    snapshot_type snapshot_type NOT NULL,
    begin_moment timestamp with time zone NOT NULL,
    end_moment timestamp with time zone NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT pk_snapshots PRIMARY KEY (id),
    CONSTRAINT fk_snapshots_users_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE);

CREATE INDEX ix_snapshots_user_id ON snapshots (user_id);

CREATE TYPE issue_type AS ENUM ('none', 'bag_issue', 'violation_issue');

CREATE TABLE issues (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    issue_type issue_type NOT NULL,
    title text NOT NULL,
    description text NOT NULL,
    img_link text NOT NULL,
    issue_moment timestamp with time zone NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT pk_issues PRIMARY KEY (id),
    CONSTRAINT fk_issues_users_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE);

CREATE INDEX ix_issues_user_id ON issues (user_id);

CREATE TYPE user_role AS ENUM ('none', 'user', 'admin');
ALTER TABLE users ADD role user_role NOT NULL DEFAULT 'none'::user_role;

ALTER TABLE users ADD account_creation timestamp with time zone NOT NULL DEFAULT TIMESTAMPTZ '0001-01-01 00:00:00+00:00';

CREATE TABLE user_devices (
    user_id integer NOT NULL,
    firebase_token text NOT NULL,
    token_set_moment timestamp with time zone NOT NULL,
    is_active boolean NOT NULL,
    CONSTRAINT pk_user_devices PRIMARY KEY (user_id, firebase_token),
    CONSTRAINT fk_user_devices_users_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE);

CREATE TABLE direct_chats (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    caption text NOT NULL,
    create_time timestamp with time zone NOT NULL,
    user1id integer NOT NULL,
    user2id integer NOT NULL,
    user_id integer NULL,
    CONSTRAINT pk_direct_chats PRIMARY KEY (id),
    CONSTRAINT fk_direct_chats_users_user_id FOREIGN KEY (user1id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_direct_chats_users_user_id1 FOREIGN KEY (user2id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_direct_chats_users_user_id11 FOREIGN KEY (user_id) REFERENCES users (id));

CREATE TABLE messages (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    send_time timestamp with time zone NOT NULL,
    text text NOT NULL,
    is_edited boolean NOT NULL,
    user_id integer NOT NULL,
    chat_id integer NOT NULL,
    CONSTRAINT pk_messages PRIMARY KEY (id),
    CONSTRAINT fk_messages_direct_chats_chat_id FOREIGN KEY (chat_id) REFERENCES direct_chats (id) ON DELETE CASCADE,
    CONSTRAINT fk_messages_users_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE);

CREATE INDEX ix_direct_chats_user_id ON direct_chats (user_id);
CREATE INDEX ix_direct_chats_user1id ON direct_chats (user1id);
CREATE INDEX ix_direct_chats_user2id ON direct_chats (user2id);
CREATE INDEX ix_messages_chat_id ON messages (chat_id);
CREATE INDEX ix_messages_user_id ON messages (user_id);

CREATE TYPE issue_status AS ENUM ('none', 'reported', 'in_progress', 'closed');

ALTER TABLE issues ADD status issue_status NOT NULL DEFAULT 'none'::issue_status;

ALTER TABLE snapshots ADD create_moment timestamp with time zone NOT NULL DEFAULT TIMESTAMPTZ '0001-01-01 00:00:00+00:00';

ALTER TABLE groups ADD manager_id integer NOT NULL DEFAULT 0;

CREATE INDEX ix_groups_manager_id ON groups (manager_id);

ALTER TABLE groups ADD CONSTRAINT fk_groups_users_manager_id FOREIGN KEY (manager_id) REFERENCES users (id) ON DELETE CASCADE;

CREATE TABLE alerts (
	id integer GENERATED BY DEFAULT AS IDENTITY,
	title text NOT NULL,
    description text NOT NULL,
    moment timestamp with time zone NOT NULL,
    is_alerted boolean NOT NULL,
    CONSTRAINT pk_alerts PRIMARY KEY (id));